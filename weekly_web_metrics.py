# -*- coding: utf-8 -*-
"""Weekly Web Metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GM9gI0g3CgdjfNB_xmC_Y7zAdjZAteSa

**This code collects and processes Data From UA & GA4 To collect important webmetrics**
"""

import pandas as pd
import json
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from datetime import datetime

def fetch_ua_data(credentials_path, view_id, start_date, end_date, metrics. dimensions):

  creds = Credentials.from_service_account_file(credentials_path, scopes=["https://www.googleapis.com/auth/analytics.readonly"])

  #build the service

  analytics = build('analyticsreporting', 'v4', credentials=creds)

  #fetch the report

  response = analytics.reports().batchget(
      body={
          'reportRequests': [{
              'viewId': view_id,
              'dateRanges': [{'startDate': start_date, 'endDate':end_date}],
              'metrics': metrics,
              'dimensions': dimensions
          }]
      }
  ).execute()

  return response


def main():
  try:
    #settings
    credentials_path = r"file_path"
    view_id = '123456789'
    start_date = '2022-09-05'
    end_date = '2022-09-11'
    metrics = [
        {'expression': 'ga:sessions'},
        {'expression': 'ga:newusers'},
        {'expression': 'ga:transactionRevenue'},
        {'expression': 'ga:transactions'},
        {'expression': 'ga:revenuePerTransaction'},
        {'expression': 'ga:transactionPerSession'}
    ]
    dimensions = [{'name': 'ga:date'}]

    #operations

    response = fetch_ua_data(credentials_path, view_id, start_date, end_date, metrics, dimensions)
    df = process_ua_response(respnse)
    df.to_excel('weekly_report_ua(aug 05 2022).xlsx', index=False)
  except Exception as e:
    print("Error:", str(e))

if __name__ == '__main__':
  main()

import pandas as pd
import json
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange, Dimension, Metric, RunReportRequest
from datetime import datetime

def fetch_ga_data(credentuials_path, property_id, start_date, end_date, metrics, dimensions):
  with open(credentials_path) as credentials_file:
    client = BetaAnalyticsDataClient.from_service_account_info(json.load(credentials_file))

  request = RunReportRequest(property=f"properties/{123456789}",
                             date_ranges=[DateRange(start_date=start_date, end_date=end_date)],
                             metrics=metrics,
                             dimensions=dimensions)
  return client.run_report(request)

def process_response(response):
  data = [[value.value for value in row.dimension_values] + [value.value for value in row.metric_value] for row in response.rows]
  df = pd.DataFrame(data, columns=['Date', 'Sessions', 'New users', 'TotalRevenue', 'Transactions', 'SessionConversionRate', 'AOV'])
  df[['Sessions', 'New Users', 'TotalRevenue', 'Transaction', 'SessionConversionRate', 'AOV']] = df[['Sessions', 'New Users', 'TotalRevenue', 'Transactions', 'SessionConversionRate', 'AOV']].apply(pd.to_numeric)
  totals = df[['Sessions', 'New Users', 'TotalRevenue', 'Transactions']].sum()
  total_conversion_rate =totals['Transactions']/totals['Sessions'] * 100 if totals['Sessions'] != 0 else 0
  total_aov= totals['TotalRevenue']/totals['Transactions'] if totals['Transactions'] != 0 else 0
  df.loc[len(df)] = ['Total', totals['Sessions'], totals['New Users'], totals['TotalRevenue'], totals['Transactions'], total_conversion_rate, total_aov]
  return df

def maini():
  credentials_path = r"file_path"
  property_id = '123456789'
  start_date = datetime(2023, 9, 4).date().strftime("%Y-%m-%d")
  end_date = datetime(2023, 9, 10).date().strftime("%Y-%m-%d")
  metrics = [
      Metric(name = 'sessions'),
      Metric(name = 'newUsers'),
      Metric(name = 'totalRevenue'),
      Metric(name = 'transactions'),
      Metric(name = 'sessionConversionRate'),
      Metric(name = 'averagePurchaseRevenue')
  ]
  dimensions = [Dimension(name='date')]

  #operations

  response = fetch_ga_data(credentials_path, property_id, start_date, end_date, metrics, dimensions)
  df = process_response(response)
  df.to_excel('weekly_report(sep 04).xlsx', index=False)

if __name__ == '__main__':
  main()